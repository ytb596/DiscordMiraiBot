
module.exports = {
    name: 'userinfo',
    description: 'Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ ng∆∞·ªùi d√πng',
    aliases: ['user', 'ui', 'whois'],
    usage: '[@user]',
    cooldown: 3,
    category: 'Ti·ªán √≠ch',
    version: '1.2.0',
    cre: 'MiraiDev',

    async execute(client, message, args) {
        try {
            let user = message.author;
            let member = message.member;

            // N·∫øu c√≥ mention ho·∫∑c user ID
            if (args.length > 0) {
                const mention = message.mentions.users.first();
                if (mention) {
                    user = mention;
                    if (message.guild) {
                        member = await message.guild.members.fetch(user.id).catch(() => null);
                    }
                } else {
                    try {
                        user = await client.users.fetch(args[0]);
                        if (message.guild) {
                            member = await message.guild.members.fetch(user.id).catch(() => null);
                        }
                    } catch (error) {
                        return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng! Vui l√≤ng mention ho·∫∑c cung c·∫•p ID h·ª£p l·ªá.');
                    }
                }
            }

            const embed = {
                color: member?.displayHexColor || 0x3498db,
                title: `üë§ Th√¥ng tin ng∆∞·ªùi d√πng: ${user.username}`,
                thumbnail: {
                    url: user.displayAvatarURL({ dynamic: true, size: 256 })
                },
                fields: [
                    {
                        name: 'üè∑Ô∏è Tag',
                        value: user.tag,
                        inline: true
                    },
                    {
                        name: 'üÜî ID',
                        value: user.id,
                        inline: true
                    },
                    {
                        name: 'ü§ñ Bot',
                        value: user.bot ? 'C√≥' : 'Kh√¥ng',
                        inline: true
                    },
                    {
                        name: 'üìÖ T·∫°o t√†i kho·∫£n',
                        value: `<t:${Math.floor(user.createdTimestamp / 1000)}:F>`,
                        inline: false
                    }
                ],
                timestamp: new Date(),
                footer: {
                    text: 'MIRAI Bot ‚Ä¢ User Info'
                }
            };

            // Th√¥ng tin member n·∫øu trong guild
            if (member) {
                embed.fields.push(
                    {
                        name: 'üìÖ Tham gia m√°y ch·ªß',
                        value: `<t:${Math.floor(member.joinedTimestamp / 1000)}:F>`,
                        inline: false
                    },
                    {
                        name: 'üé≠ Vai tr√≤ cao nh·∫•t',
                        value: member.roles.highest.name,
                        inline: true
                    },
                    {
                        name: 'üé® M√†u vai tr√≤',
                        value: member.displayHexColor || '#000000',
                        inline: true
                    }
                );

                if (member.nickname) {
                    embed.fields.push({
                        name: 'üìù Bi·ªát danh',
                        value: member.nickname,
                        inline: true
                    });
                }

                // Vai tr√≤
                const roles = member.roles.cache
                    .filter(role => role.id !== message.guild.id)
                    .sort((a, b) => b.position - a.position)
                    .map(role => role.toString())
                    .slice(0, 10);

                if (roles.length > 0) {
                    embed.fields.push({
                        name: `üé≠ Vai tr√≤ (${member.roles.cache.size - 1})`,
                        value: roles.join(' ') + (member.roles.cache.size > 11 ? '...' : ''),
                        inline: false
                    });
                }
            }

            return message.reply({ embeds: [embed] });
        } catch (error) {
            console.error(`Error executing ${this.name}:`, error);
            return message.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng!');
        }
    }
};
