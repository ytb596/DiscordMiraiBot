const fs = require('fs');
const path = require('path');

const filePath = path.join(__dirname, '..', 'data', 'joker.json');

module.exports = {
    name: 'joker',
    description: 'Hi·ªÉn th·ªã m·ªôt c√¢u Joker ng·∫´u nhi√™n ho·∫∑c th√™m c√¢u m·ªõi',
    aliases: [],
    usage: '[add <c√¢u> | list [trang]]',
    cooldown: 3,
    category: 'Gi·∫£i tr√≠',
    version: '1.1',
    cre: 'MiraiDev',

    execute(message, args) {
        // T·∫°o file n·∫øu ch∆∞a c√≥
        try {
            if (!fs.existsSync(filePath)) {
                fs.writeFileSync(filePath, JSON.stringify([]));
            }
        } catch (err) {
            console.error('L·ªói khi t·∫°o file:', err);
            return message.reply('‚ùå Kh√¥ng th·ªÉ t·∫°o file d·ªØ li·ªáu!');
        }

        let jokes;
        try {
            jokes = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        } catch (err) {
            console.error('L·ªói khi ƒë·ªçc file:', err);
            return message.reply('‚ùå Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu c√¢u n√≥i!');
        }

        const subCommand = args[0];

        // Th√™m c√¢u m·ªõi
        if (subCommand === 'add') {
            const newQuote = args.slice(1).join(' ').trim();
            if (!newQuote) return message.reply('‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung c√¢u c·∫ßn th√™m!');

            if (jokes.includes(newQuote)) {
                return message.reply('‚ö†Ô∏è C√¢u n√†y ƒë√£ t·ªìn t·∫°i trong danh s√°ch!');
            }

            jokes.push(newQuote);
            try {
                fs.writeFileSync(filePath, JSON.stringify(jokes, null, 2));
            } catch (err) {
                console.error('L·ªói khi ghi file:', err);
                return message.reply('‚ùå Kh√¥ng th·ªÉ l∆∞u c√¢u m·ªõi!');
            }

            return message.reply('‚úÖ ƒê√£ th√™m c√¢u Joker m·ªõi!');
        }

        // Hi·ªÉn th·ªã danh s√°ch v·ªõi ph√¢n trang
        if (subCommand === 'list') {
            if (jokes.length === 0) return message.reply('‚ö†Ô∏è Danh s√°ch Joker ƒëang tr·ªëng!');

            const perPage = 10;
            const totalPages = Math.ceil(jokes.length / perPage);
            const page = parseInt(args[1]) || 1;

            if (page < 1 || page > totalPages) {
                return message.reply(`‚ö†Ô∏è Trang kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ 1 ƒë·∫øn ${totalPages}.`);
            }

            const list = jokes
                .slice((page - 1) * perPage, page * perPage)
                .map((quote, i) => `**${(page - 1) * perPage + i + 1}.** ${quote}`)
                .join('\n');

            return message.reply({
                content: `üìú **Danh s√°ch c√¢u Joker (Trang ${page}/${totalPages}):**\n${list}`
            });
        }

        // Tr·∫£ v·ªÅ ng·∫´u nhi√™n
        if (jokes.length === 0) return message.reply('‚ö†Ô∏è Ch∆∞a c√≥ c√¢u Joker n√†o!');
        const random = jokes[Math.floor(Math.random() * jokes.length)];
        return message.reply(`üÉè **Joker n√≥i:**\n> ${random}`);
    }
};