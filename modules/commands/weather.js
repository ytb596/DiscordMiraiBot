
module.exports = {
    name: 'weather',
    description: 'Xem th√¥ng tin th·ªùi ti·∫øt c·ªßa m·ªôt th√†nh ph·ªë (d·ªØ li·ªáu gi·∫£ l·∫≠p)',
    aliases: ['w', 'thoitiet', 'thoi'],
    usage: '<t√™n_th√†nh_ph·ªë>',
    cooldown: 5,
    category: 'Ti·ªán √≠ch',
    version: '1.1.0',
    cre: 'MiraiDev',

    async execute(client, message, args) {
        try {
            if (!args.length) {
                return message.reply('‚ùå Vui l√≤ng cung c·∫•p t√™n th√†nh ph·ªë!\n**V√≠ d·ª•:** `!weather H√† N·ªôi`');
            }

            const city = args.join(' ');
            
            // D·ªØ li·ªáu th·ªùi ti·∫øt gi·∫£ l·∫≠p
            const weatherConditions = [
                { name: 'N·∫Øng', emoji: '‚òÄÔ∏è', temp: [25, 35] },
                { name: 'M√¢y', emoji: '‚òÅÔ∏è', temp: [20, 28] },
                { name: 'M∆∞a', emoji: 'üåßÔ∏è', temp: [18, 25] },
                { name: 'Gi√¥ng', emoji: '‚õàÔ∏è', temp: [22, 27] },
                { name: 'S∆∞∆°ng m√π', emoji: 'üå´Ô∏è', temp: [15, 22] },
                { name: 'Tuy·∫øt', emoji: '‚ùÑÔ∏è', temp: [-5, 5] }
            ];

            const randomCondition = weatherConditions[Math.floor(Math.random() * weatherConditions.length)];
            const temperature = Math.floor(Math.random() * (randomCondition.temp[1] - randomCondition.temp[0] + 1)) + randomCondition.temp[0];
            const humidity = Math.floor(Math.random() * 41) + 40; // 40-80%
            const windSpeed = Math.floor(Math.random() * 21) + 5; // 5-25 km/h
            const pressure = Math.floor(Math.random() * 51) + 1000; // 1000-1050 hPa

            const embed = {
                color: this.getWeatherColor(randomCondition.name),
                title: `üå§Ô∏è Th·ªùi ti·∫øt t·∫°i ${city}`,
                thumbnail: {
                    url: 'https://images.unsplash.com/photo-1504608524841-42fe6f032b4b?w=300&h=300&fit=crop'
                },
                fields: [
                    {
                        name: 'üå°Ô∏è Nhi·ªát ƒë·ªô',
                        value: `${temperature}¬∞C`,
                        inline: true
                    },
                    {
                        name: 'üå§Ô∏è T√¨nh tr·∫°ng',
                        value: `${randomCondition.emoji} ${randomCondition.name}`,
                        inline: true
                    },
                    {
                        name: 'üíß ƒê·ªô ·∫©m',
                        value: `${humidity}%`,
                        inline: true
                    },
                    {
                        name: 'üí® T·ªëc ƒë·ªô gi√≥',
                        value: `${windSpeed} km/h`,
                        inline: true
                    },
                    {
                        name: 'üåä √Åp su·∫•t',
                        value: `${pressure} hPa`,
                        inline: true
                    },
                    {
                        name: 'üëï G·ª£i √Ω trang ph·ª•c',
                        value: this.getClothingSuggestion(temperature, randomCondition.name),
                        inline: true
                    }
                ],
                footer: {
                    text: 'MIRAI Bot ‚Ä¢ D·ªØ li·ªáu th·ªùi ti·∫øt gi·∫£ l·∫≠p ‚Ä¢ C·∫≠p nh·∫≠t l√∫c'
                },
                timestamp: new Date()
            };

            return message.reply({ embeds: [embed] });
        } catch (error) {
            console.error(`Error executing ${this.name}:`, error);
            return message.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt!');
        }
    },

    getWeatherColor(condition) {
        const colors = {
            'N·∫Øng': 0xffd700,
            'M√¢y': 0x87ceeb,
            'M∆∞a': 0x4682b4,
            'Gi√¥ng': 0x483d8b,
            'S∆∞∆°ng m√π': 0xd3d3d3,
            'Tuy·∫øt': 0xf0f8ff
        };
        return colors[condition] || 0x3498db;
    },

    getClothingSuggestion(temp, condition) {
        if (temp < 10) return 'üß• √Åo kho√°c d√†y, khƒÉn qu√†ng';
        if (temp < 20) return 'üß• √Åo kho√°c nh·∫π, √°o len';
        if (temp < 25) return 'üëï √Åo d√†i tay, qu·∫ßn jeans';
        if (temp < 30) return 'üëï √Åo thun, qu·∫ßn short';
        return 'ü©≥ Qu·∫ßn √°o m·ªèng, kem ch·ªëng n·∫Øng';
    }
};
