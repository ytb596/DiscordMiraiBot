
module.exports = {
    name: 'choose',
    description: 'Ch·ªçn ng·∫´u nhi√™n m·ªôt t√πy ch·ªçn t·ª´ danh s√°ch ƒë∆∞·ª£c cung c·∫•p',
    aliases: ['pick', 'select', 'chon'],
    usage: '<t√πy_ch·ªçn_1> <t√πy_ch·ªçn_2> [t√πy_ch·ªçn_3...]',
    cooldown: 2,
    category: 'Ti·ªán √≠ch',
    version: '1.0.0',
    cre: 'MiraiDev',

    async execute(client, message, args) {
        try {
            if (args.length < 2) {
                return message.reply('‚ùå B·∫°n c·∫ßn cung c·∫•p √≠t nh·∫•t 2 t√πy ch·ªçn ƒë·ªÉ t√¥i c√≥ th·ªÉ ch·ªçn!');
            }

            // T√°ch c√°c t√πy ch·ªçn b·∫±ng d·∫•u ph·∫©y ho·∫∑c d·∫•u c√°ch
            let options = [];
            const joined = args.join(' ');
            
            if (joined.includes(',')) {
                options = joined.split(',').map(option => option.trim()).filter(option => option.length > 0);
            } else {
                options = args;
            }

            if (options.length < 2) {
                return message.reply('‚ùå B·∫°n c·∫ßn cung c·∫•p √≠t nh·∫•t 2 t√πy ch·ªçn ƒë·ªÉ t√¥i c√≥ th·ªÉ ch·ªçn!');
            }

            const randomChoice = options[Math.floor(Math.random() * options.length)];

            const embed = {
                color: 0x3498db,
                title: 'üéØ L·ª±a Ch·ªçn Ng·∫´u Nhi√™n',
                fields: [
                    {
                        name: 'üìù C√°c t√πy ch·ªçn',
                        value: options.map((option, index) => `${index + 1}. ${option}`).join('\n'),
                        inline: false
                    },
                    {
                        name: '‚ú® L·ª±a ch·ªçn c·ªßa t√¥i',
                        value: `**${randomChoice}**`,
                        inline: false
                    }
                ],
                timestamp: new Date(),
                footer: {
                    text: `MIRAI Bot ‚Ä¢ Ch·ªçn cho ${message.author.username}`
                }
            };

            return message.reply({ embeds: [embed] });
        } catch (error) {
            console.error(`Error executing ${this.name}:`, error);
            return message.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi ch·ªçn t√πy ch·ªçn!');
        }
    }
};
